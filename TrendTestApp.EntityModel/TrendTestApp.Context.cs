//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrendTestApp.EntityModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TrendEntities : DbContext
    {
        public TrendEntities()
            : base("name=TrendEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<Address_Companies> Address_Companies { get; set; }
        public virtual DbSet<Address_Customers> Address_Customers { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<AddressType> AddressTypes { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Catalogue_CompanyCreditInfo> Catalogue_CompanyCreditInfo { get; set; }
        public virtual DbSet<CatalogueContact> CatalogueContacts { get; set; }
        public virtual DbSet<CatalogueImage> CatalogueImages { get; set; }
        public virtual DbSet<Catalogue> Catalogues { get; set; }
        public virtual DbSet<Catalogues_Colours> Catalogues_Colours { get; set; }
        public virtual DbSet<CatalogueSurcharge> CatalogueSurcharges { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<CategoryGroup> CategoryGroups { get; set; }
        public virtual DbSet<CategoryMatchingFeature> CategoryMatchingFeatures { get; set; }
        public virtual DbSet<ColourImage> ColourImages { get; set; }
        public virtual DbSet<Colour> Colours { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Company_Catalogues> Company_Catalogues { get; set; }
        public virtual DbSet<CompanyBranding> CompanyBrandings { get; set; }
        public virtual DbSet<CompanyCreditInfo> CompanyCreditInfoes { get; set; }
        public virtual DbSet<County> Counties { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<DeliveryCharge> DeliveryCharges { get; set; }
        public virtual DbSet<DeliveryMethod> DeliveryMethods { get; set; }
        public virtual DbSet<Discount> Discounts { get; set; }
        public virtual DbSet<DoorHang> DoorHangs { get; set; }
        public virtual DbSet<DoorOption> DoorOptions { get; set; }
        public virtual DbSet<DoorStyle> DoorStyles { get; set; }
        public virtual DbSet<DoorStyleImage> DoorStyleImages { get; set; }
        public virtual DbSet<DoorStyleTag> DoorStyleTags { get; set; }
        public virtual DbSet<DrawerBox> DrawerBoxes { get; set; }
        public virtual DbSet<FavouriteProduct> FavouriteProducts { get; set; }
        public virtual DbSet<GlazedDoorStyle> GlazedDoorStyles { get; set; }
        public virtual DbSet<GlazedDoorStyles_RangeGroups> GlazedDoorStyles_RangeGroups { get; set; }
        public virtual DbSet<IntroductionRoute> IntroductionRoutes { get; set; }
        public virtual DbSet<Order_Products> Order_Products { get; set; }
        public virtual DbSet<Order_ProductServices> Order_ProductServices { get; set; }
        public virtual DbSet<OrderAddress> OrderAddresses { get; set; }
        public virtual DbSet<OrderQuoteStatu> OrderQuoteStatus { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }
        public virtual DbSet<PriceGroup> PriceGroups { get; set; }
        public virtual DbSet<Product_Colours> Product_Colours { get; set; }
        public virtual DbSet<Product_SubCategory> Product_SubCategory { get; set; }
        public virtual DbSet<ProductFavourite> ProductFavourites { get; set; }
        public virtual DbSet<ProductImage> ProductImages { get; set; }
        public virtual DbSet<ProductPrice> ProductPrices { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductServiceImage> ProductServiceImages { get; set; }
        public virtual DbSet<ProductService> ProductServices { get; set; }
        public virtual DbSet<Quote_Colours> Quote_Colours { get; set; }
        public virtual DbSet<Quote_DoorStyles> Quote_DoorStyles { get; set; }
        public virtual DbSet<Quote_Products> Quote_Products { get; set; }
        public virtual DbSet<Quote_ProductServices> Quote_ProductServices { get; set; }
        public virtual DbSet<QuoteAddress> QuoteAddresses { get; set; }
        public virtual DbSet<Quote> Quotes { get; set; }
        public virtual DbSet<RangeGroup> RangeGroups { get; set; }
        public virtual DbSet<RangeGroup_DoorStyle> RangeGroup_DoorStyle { get; set; }
        public virtual DbSet<RangeGroup_Tags> RangeGroup_Tags { get; set; }
        public virtual DbSet<StationaryTemplate> StationaryTemplates { get; set; }
        public virtual DbSet<SubCategory> SubCategories { get; set; }
        public virtual DbSet<SubCategoryImage> SubCategoryImages { get; set; }
        public virtual DbSet<Tag> Tags { get; set; }
        public virtual DbSet<Tenant_TenantSettings> Tenant_TenantSettings { get; set; }
        public virtual DbSet<TenantDomain> TenantDomains { get; set; }
        public virtual DbSet<Tenant> Tenants { get; set; }
        public virtual DbSet<TenantSettingCategory> TenantSettingCategories { get; set; }
        public virtual DbSet<TenantSetting> TenantSettings { get; set; }
        public virtual DbSet<TrendUser> TrendUsers { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
        public virtual DbSet<VatRate> VatRates { get; set; }
        public virtual DbSet<RangeGroup_Group> RangeGroup_Group { get; set; }
        public virtual DbSet<database_firewall_rules> database_firewall_rules { get; set; }
    
        [DbFunction("TrendEntities", "ListToTable")]
        public virtual IQueryable<ListToTable_Result> ListToTable(string inList)
        {
            var inListParameter = inList != null ?
                new ObjectParameter("InList", inList) :
                new ObjectParameter("InList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ListToTable_Result>("[TrendEntities].[ListToTable](@InList)", inListParameter);
        }
    
        public virtual int Address_InsertOrUpdate(Nullable<int> addressId, string line1, string line2, string line3, string line4, string line5, string postcode, Nullable<int> countyId, string addressName)
        {
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(int));
    
            var line1Parameter = line1 != null ?
                new ObjectParameter("Line1", line1) :
                new ObjectParameter("Line1", typeof(string));
    
            var line2Parameter = line2 != null ?
                new ObjectParameter("Line2", line2) :
                new ObjectParameter("Line2", typeof(string));
    
            var line3Parameter = line3 != null ?
                new ObjectParameter("Line3", line3) :
                new ObjectParameter("Line3", typeof(string));
    
            var line4Parameter = line4 != null ?
                new ObjectParameter("Line4", line4) :
                new ObjectParameter("Line4", typeof(string));
    
            var line5Parameter = line5 != null ?
                new ObjectParameter("Line5", line5) :
                new ObjectParameter("Line5", typeof(string));
    
            var postcodeParameter = postcode != null ?
                new ObjectParameter("Postcode", postcode) :
                new ObjectParameter("Postcode", typeof(string));
    
            var countyIdParameter = countyId.HasValue ?
                new ObjectParameter("CountyId", countyId) :
                new ObjectParameter("CountyId", typeof(int));
    
            var addressNameParameter = addressName != null ?
                new ObjectParameter("AddressName", addressName) :
                new ObjectParameter("AddressName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Address_InsertOrUpdate", addressIdParameter, line1Parameter, line2Parameter, line3Parameter, line4Parameter, line5Parameter, postcodeParameter, countyIdParameter, addressNameParameter);
        }
    
        public virtual int Company_InsertOrUpdate(Nullable<int> companyId, string companyName, string vATNumber, string phoneNumber, string mobileNumber, string sageRef)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var vATNumberParameter = vATNumber != null ?
                new ObjectParameter("VATNumber", vATNumber) :
                new ObjectParameter("VATNumber", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var sageRefParameter = sageRef != null ?
                new ObjectParameter("SageRef", sageRef) :
                new ObjectParameter("SageRef", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Company_InsertOrUpdate", companyIdParameter, companyNameParameter, vATNumberParameter, phoneNumberParameter, mobileNumberParameter, sageRefParameter);
        }
    
        public virtual int CompanyBranding_InsertOrUpdate(Nullable<int> companyBrandingId, Nullable<int> companyId, string primaryBrandColour, byte[] companyLogo, Nullable<bool> hasImage)
        {
            var companyBrandingIdParameter = companyBrandingId.HasValue ?
                new ObjectParameter("CompanyBrandingId", companyBrandingId) :
                new ObjectParameter("CompanyBrandingId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var primaryBrandColourParameter = primaryBrandColour != null ?
                new ObjectParameter("PrimaryBrandColour", primaryBrandColour) :
                new ObjectParameter("PrimaryBrandColour", typeof(string));
    
            var companyLogoParameter = companyLogo != null ?
                new ObjectParameter("CompanyLogo", companyLogo) :
                new ObjectParameter("CompanyLogo", typeof(byte[]));
    
            var hasImageParameter = hasImage.HasValue ?
                new ObjectParameter("HasImage", hasImage) :
                new ObjectParameter("HasImage", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompanyBranding_InsertOrUpdate", companyBrandingIdParameter, companyIdParameter, primaryBrandColourParameter, companyLogoParameter, hasImageParameter);
        }
    
        public virtual int CompanyCreditInfo_InsertOrUpdate(string mWAccountCode, Nullable<int> catalogueID, Nullable<int> creditLimit, Nullable<decimal> remainingLimit)
        {
            var mWAccountCodeParameter = mWAccountCode != null ?
                new ObjectParameter("MWAccountCode", mWAccountCode) :
                new ObjectParameter("MWAccountCode", typeof(string));
    
            var catalogueIDParameter = catalogueID.HasValue ?
                new ObjectParameter("CatalogueID", catalogueID) :
                new ObjectParameter("CatalogueID", typeof(int));
    
            var creditLimitParameter = creditLimit.HasValue ?
                new ObjectParameter("CreditLimit", creditLimit) :
                new ObjectParameter("CreditLimit", typeof(int));
    
            var remainingLimitParameter = remainingLimit.HasValue ?
                new ObjectParameter("RemainingLimit", remainingLimit) :
                new ObjectParameter("RemainingLimit", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompanyCreditInfo_InsertOrUpdate", mWAccountCodeParameter, catalogueIDParameter, creditLimitParameter, remainingLimitParameter);
        }
    
        public virtual int CompanyCreditInfo_ReduceRemainingBudget(Nullable<int> companyID, Nullable<int> catalogueID, Nullable<decimal> reduceValue)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var catalogueIDParameter = catalogueID.HasValue ?
                new ObjectParameter("CatalogueID", catalogueID) :
                new ObjectParameter("CatalogueID", typeof(int));
    
            var reduceValueParameter = reduceValue.HasValue ?
                new ObjectParameter("ReduceValue", reduceValue) :
                new ObjectParameter("ReduceValue", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompanyCreditInfo_ReduceRemainingBudget", companyIDParameter, catalogueIDParameter, reduceValueParameter);
        }
    
        public virtual ObjectResult<CompanyCreditInfo_Select_Result> CompanyCreditInfo_Select(Nullable<int> companyId, Nullable<int> catalogueId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var catalogueIdParameter = catalogueId.HasValue ?
                new ObjectParameter("CatalogueId", catalogueId) :
                new ObjectParameter("CatalogueId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompanyCreditInfo_Select_Result>("CompanyCreditInfo_Select", companyIdParameter, catalogueIdParameter);
        }
    
        public virtual int CompanyCreditLimit_InsertOrUpdate(Nullable<int> companyID, Nullable<int> catalogueID, Nullable<decimal> creditLimit)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var catalogueIDParameter = catalogueID.HasValue ?
                new ObjectParameter("CatalogueID", catalogueID) :
                new ObjectParameter("CatalogueID", typeof(int));
    
            var creditLimitParameter = creditLimit.HasValue ?
                new ObjectParameter("CreditLimit", creditLimit) :
                new ObjectParameter("CreditLimit", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompanyCreditLimit_InsertOrUpdate", companyIDParameter, catalogueIDParameter, creditLimitParameter);
        }
    
        public virtual int Discount_InsertOrUpdate(Nullable<int> discountId, Nullable<int> categoryId, Nullable<int> companyId, Nullable<decimal> discountPercent, Nullable<decimal> markUp)
        {
            var discountIdParameter = discountId.HasValue ?
                new ObjectParameter("DiscountId", discountId) :
                new ObjectParameter("DiscountId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var discountPercentParameter = discountPercent.HasValue ?
                new ObjectParameter("DiscountPercent", discountPercent) :
                new ObjectParameter("DiscountPercent", typeof(decimal));
    
            var markUpParameter = markUp.HasValue ?
                new ObjectParameter("MarkUp", markUp) :
                new ObjectParameter("MarkUp", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Discount_InsertOrUpdate", discountIdParameter, categoryIdParameter, companyIdParameter, discountPercentParameter, markUpParameter);
        }
    
        public virtual ObjectResult<Discounts_Select_Result> Discounts_Select(Nullable<int> companyId, Nullable<int> catalogueId, Nullable<int> categoryId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var catalogueIdParameter = catalogueId.HasValue ?
                new ObjectParameter("CatalogueId", catalogueId) :
                new ObjectParameter("CatalogueId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Discounts_Select_Result>("Discounts_Select", companyIdParameter, catalogueIdParameter, categoryIdParameter);
        }
    
        public virtual int DiscountSync_InsertOrUpdate(Nullable<int> companyID, Nullable<int> categoryID, Nullable<decimal> discountPer)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var discountPerParameter = discountPer.HasValue ?
                new ObjectParameter("DiscountPer", discountPer) :
                new ObjectParameter("DiscountPer", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DiscountSync_InsertOrUpdate", companyIDParameter, categoryIDParameter, discountPerParameter);
        }
    
        public virtual ObjectResult<DoorStyle_Tags_Result> DoorStyle_Tags()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DoorStyle_Tags_Result>("DoorStyle_Tags");
        }
    
        public virtual ObjectResult<Handles_SelectHandleGroups_Result> Handles_SelectHandleGroups()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Handles_SelectHandleGroups_Result>("Handles_SelectHandleGroups");
        }
    
        public virtual ObjectResult<Handles_SelectHandles_Result> Handles_SelectHandles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Handles_SelectHandles_Result>("Handles_SelectHandles");
        }
    
        public virtual ObjectResult<Orders_LastActive_Result> Orders_LastActive(Nullable<int> companyId, Nullable<int> trendUserID, Nullable<int> top)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var trendUserIDParameter = trendUserID.HasValue ?
                new ObjectParameter("TrendUserID", trendUserID) :
                new ObjectParameter("TrendUserID", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("Top", top) :
                new ObjectParameter("Top", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Orders_LastActive_Result>("Orders_LastActive", companyIdParameter, trendUserIDParameter, topParameter);
        }
    
        public virtual ObjectResult<Orders_Search_Result> Orders_Search(string orderID, string yourRef, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> orderType, Nullable<int> catalogueId, Nullable<int> companyId, Nullable<int> trendUserID)
        {
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            var yourRefParameter = yourRef != null ?
                new ObjectParameter("YourRef", yourRef) :
                new ObjectParameter("YourRef", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var orderTypeParameter = orderType.HasValue ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(int));
    
            var catalogueIdParameter = catalogueId.HasValue ?
                new ObjectParameter("CatalogueId", catalogueId) :
                new ObjectParameter("CatalogueId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var trendUserIDParameter = trendUserID.HasValue ?
                new ObjectParameter("TrendUserID", trendUserID) :
                new ObjectParameter("TrendUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Orders_Search_Result>("Orders_Search", orderIDParameter, yourRefParameter, fromDateParameter, toDateParameter, orderTypeParameter, catalogueIdParameter, companyIdParameter, trendUserIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> Orders_SelectSalesTotal(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyId, Nullable<int> trendUserID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var trendUserIDParameter = trendUserID.HasValue ?
                new ObjectParameter("TrendUserID", trendUserID) :
                new ObjectParameter("TrendUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Orders_SelectSalesTotal", fromDateParameter, toDateParameter, companyIdParameter, trendUserIDParameter);
        }
    
        public virtual ObjectResult<PriceGroups_SelectForDoorStyles_Result> PriceGroups_SelectForDoorStyles(string doorStyleIds)
        {
            var doorStyleIdsParameter = doorStyleIds != null ?
                new ObjectParameter("DoorStyleIds", doorStyleIds) :
                new ObjectParameter("DoorStyleIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PriceGroups_SelectForDoorStyles_Result>("PriceGroups_SelectForDoorStyles", doorStyleIdsParameter);
        }
    
        public virtual int Product_Clean()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Product_Clean");
        }
    
        public virtual int Product_Delete(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Product_Delete", productIDParameter);
        }
    
        public virtual int Product_InsertOrUpdate(Nullable<int> pdRef, Nullable<int> catalogueID, string pdCode, string pdCatDesc, Nullable<int> pdHeight, Nullable<int> pdWidth, Nullable<int> pdDepth, Nullable<int> postScore, string imageLocation, string productInformation)
        {
            var pdRefParameter = pdRef.HasValue ?
                new ObjectParameter("pdRef", pdRef) :
                new ObjectParameter("pdRef", typeof(int));
    
            var catalogueIDParameter = catalogueID.HasValue ?
                new ObjectParameter("CatalogueID", catalogueID) :
                new ObjectParameter("CatalogueID", typeof(int));
    
            var pdCodeParameter = pdCode != null ?
                new ObjectParameter("pdCode", pdCode) :
                new ObjectParameter("pdCode", typeof(string));
    
            var pdCatDescParameter = pdCatDesc != null ?
                new ObjectParameter("pdCatDesc", pdCatDesc) :
                new ObjectParameter("pdCatDesc", typeof(string));
    
            var pdHeightParameter = pdHeight.HasValue ?
                new ObjectParameter("pdHeight", pdHeight) :
                new ObjectParameter("pdHeight", typeof(int));
    
            var pdWidthParameter = pdWidth.HasValue ?
                new ObjectParameter("pdWidth", pdWidth) :
                new ObjectParameter("pdWidth", typeof(int));
    
            var pdDepthParameter = pdDepth.HasValue ?
                new ObjectParameter("pdDepth", pdDepth) :
                new ObjectParameter("pdDepth", typeof(int));
    
            var postScoreParameter = postScore.HasValue ?
                new ObjectParameter("PostScore", postScore) :
                new ObjectParameter("PostScore", typeof(int));
    
            var imageLocationParameter = imageLocation != null ?
                new ObjectParameter("ImageLocation", imageLocation) :
                new ObjectParameter("ImageLocation", typeof(string));
    
            var productInformationParameter = productInformation != null ?
                new ObjectParameter("ProductInformation", productInformation) :
                new ObjectParameter("ProductInformation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Product_InsertOrUpdate", pdRefParameter, catalogueIDParameter, pdCodeParameter, pdCatDescParameter, pdHeightParameter, pdWidthParameter, pdDepthParameter, postScoreParameter, imageLocationParameter, productInformationParameter);
        }
    
        public virtual int Product_SubCategory_DeleteNotValid()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Product_SubCategory_DeleteNotValid");
        }
    
        public virtual int Product_SubCategory_DeleteNotValidSingle(Nullable<int> pdRef, string site)
        {
            var pdRefParameter = pdRef.HasValue ?
                new ObjectParameter("pdRef", pdRef) :
                new ObjectParameter("pdRef", typeof(int));
    
            var siteParameter = site != null ?
                new ObjectParameter("Site", site) :
                new ObjectParameter("Site", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Product_SubCategory_DeleteNotValidSingle", pdRefParameter, siteParameter);
        }
    
        public virtual int Product_Subcategory_InsertOrUpdate(Nullable<int> pdRef, Nullable<int> sCatSid, Nullable<bool> isDefault, Nullable<int> catalogueID)
        {
            var pdRefParameter = pdRef.HasValue ?
                new ObjectParameter("pdRef", pdRef) :
                new ObjectParameter("pdRef", typeof(int));
    
            var sCatSidParameter = sCatSid.HasValue ?
                new ObjectParameter("sCatSid", sCatSid) :
                new ObjectParameter("sCatSid", typeof(int));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var catalogueIDParameter = catalogueID.HasValue ?
                new ObjectParameter("CatalogueID", catalogueID) :
                new ObjectParameter("CatalogueID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Product_Subcategory_InsertOrUpdate", pdRefParameter, sCatSidParameter, isDefaultParameter, catalogueIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Product_SubCategory_Select(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Product_SubCategory_Select", productIdParameter);
        }
    
        public virtual int Product_SubCategory_SetValid(Nullable<bool> isValid)
        {
            var isValidParameter = isValid.HasValue ?
                new ObjectParameter("IsValid", isValid) :
                new ObjectParameter("IsValid", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Product_SubCategory_SetValid", isValidParameter);
        }
    
        public virtual int Product_SubCategory_SetValidSingle(Nullable<int> pdRef, string site, Nullable<bool> isValid)
        {
            var pdRefParameter = pdRef.HasValue ?
                new ObjectParameter("pdRef", pdRef) :
                new ObjectParameter("pdRef", typeof(int));
    
            var siteParameter = site != null ?
                new ObjectParameter("Site", site) :
                new ObjectParameter("Site", typeof(string));
    
            var isValidParameter = isValid.HasValue ?
                new ObjectParameter("IsValid", isValid) :
                new ObjectParameter("IsValid", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Product_SubCategory_SetValidSingle", pdRefParameter, siteParameter, isValidParameter);
        }
    
        public virtual ObjectResult<Product_Summary_Result> Product_Summary(Nullable<int> catalogueId, Nullable<int> priceGroupId, Nullable<int> doorStyleId)
        {
            var catalogueIdParameter = catalogueId.HasValue ?
                new ObjectParameter("CatalogueId", catalogueId) :
                new ObjectParameter("CatalogueId", typeof(int));
    
            var priceGroupIdParameter = priceGroupId.HasValue ?
                new ObjectParameter("PriceGroupId", priceGroupId) :
                new ObjectParameter("PriceGroupId", typeof(int));
    
            var doorStyleIdParameter = doorStyleId.HasValue ?
                new ObjectParameter("DoorStyleId", doorStyleId) :
                new ObjectParameter("DoorStyleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Product_Summary_Result>("Product_Summary", catalogueIdParameter, priceGroupIdParameter, doorStyleIdParameter);
        }
    
        public virtual ObjectResult<Product_SummaryForCatalogue_Result> Product_SummaryForCatalogue(Nullable<int> catalogueId)
        {
            var catalogueIdParameter = catalogueId.HasValue ?
                new ObjectParameter("CatalogueId", catalogueId) :
                new ObjectParameter("CatalogueId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Product_SummaryForCatalogue_Result>("Product_SummaryForCatalogue", catalogueIdParameter);
        }
    
        public virtual int Product_UpdateImage(Nullable<int> cataglogueID, string productName, byte[] binaryImage)
        {
            var cataglogueIDParameter = cataglogueID.HasValue ?
                new ObjectParameter("CataglogueID", cataglogueID) :
                new ObjectParameter("CataglogueID", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var binaryImageParameter = binaryImage != null ?
                new ObjectParameter("BinaryImage", binaryImage) :
                new ObjectParameter("BinaryImage", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Product_UpdateImage", cataglogueIDParameter, productNameParameter, binaryImageParameter);
        }
    
        public virtual int ProductPrice_InsertOrUpdate(Nullable<int> pdRef, Nullable<int> catalogueID, Nullable<decimal> price, Nullable<int> mWGroupRef)
        {
            var pdRefParameter = pdRef.HasValue ?
                new ObjectParameter("pdRef", pdRef) :
                new ObjectParameter("pdRef", typeof(int));
    
            var catalogueIDParameter = catalogueID.HasValue ?
                new ObjectParameter("CatalogueID", catalogueID) :
                new ObjectParameter("CatalogueID", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var mWGroupRefParameter = mWGroupRef.HasValue ?
                new ObjectParameter("MWGroupRef", mWGroupRef) :
                new ObjectParameter("MWGroupRef", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductPrice_InsertOrUpdate", pdRefParameter, catalogueIDParameter, priceParameter, mWGroupRefParameter);
        }
    
        public virtual ObjectResult<Products_SelectNonCompatibleDoorStyles_Result> Products_SelectNonCompatibleDoorStyles(string productIdList, Nullable<int> catalogueId)
        {
            var productIdListParameter = productIdList != null ?
                new ObjectParameter("ProductIdList", productIdList) :
                new ObjectParameter("ProductIdList", typeof(string));
    
            var catalogueIdParameter = catalogueId.HasValue ?
                new ObjectParameter("CatalogueId", catalogueId) :
                new ObjectParameter("CatalogueId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Products_SelectNonCompatibleDoorStyles_Result>("Products_SelectNonCompatibleDoorStyles", productIdListParameter, catalogueIdParameter);
        }
    
        public virtual int Quote_Delete(Nullable<int> quoteId)
        {
            var quoteIdParameter = quoteId.HasValue ?
                new ObjectParameter("QuoteId", quoteId) :
                new ObjectParameter("QuoteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Quote_Delete", quoteIdParameter);
        }
    
        public virtual int Quote_ProductInsert(Nullable<int> productId, Nullable<int> quoteId, Nullable<decimal> netCostPrice, Nullable<decimal> discountRate, Nullable<decimal> totalCostPrice, Nullable<decimal> markUpPercent, Nullable<decimal> salesPrice, Nullable<int> quantity, Nullable<bool> undrilledForHinges, Nullable<int> doorHang, Nullable<bool> dryAssembled, Nullable<int> doorOption, Nullable<int> listOrder, string notes, Nullable<decimal> depth, Nullable<int> doorStyleId, Nullable<int> cabinetColourId, Nullable<decimal> additionalCharges, Nullable<bool> depthModified)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var quoteIdParameter = quoteId.HasValue ?
                new ObjectParameter("QuoteId", quoteId) :
                new ObjectParameter("QuoteId", typeof(int));
    
            var netCostPriceParameter = netCostPrice.HasValue ?
                new ObjectParameter("NetCostPrice", netCostPrice) :
                new ObjectParameter("NetCostPrice", typeof(decimal));
    
            var discountRateParameter = discountRate.HasValue ?
                new ObjectParameter("DiscountRate", discountRate) :
                new ObjectParameter("DiscountRate", typeof(decimal));
    
            var totalCostPriceParameter = totalCostPrice.HasValue ?
                new ObjectParameter("TotalCostPrice", totalCostPrice) :
                new ObjectParameter("TotalCostPrice", typeof(decimal));
    
            var markUpPercentParameter = markUpPercent.HasValue ?
                new ObjectParameter("MarkUpPercent", markUpPercent) :
                new ObjectParameter("MarkUpPercent", typeof(decimal));
    
            var salesPriceParameter = salesPrice.HasValue ?
                new ObjectParameter("SalesPrice", salesPrice) :
                new ObjectParameter("SalesPrice", typeof(decimal));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var undrilledForHingesParameter = undrilledForHinges.HasValue ?
                new ObjectParameter("UndrilledForHinges", undrilledForHinges) :
                new ObjectParameter("UndrilledForHinges", typeof(bool));
    
            var doorHangParameter = doorHang.HasValue ?
                new ObjectParameter("DoorHang", doorHang) :
                new ObjectParameter("DoorHang", typeof(int));
    
            var dryAssembledParameter = dryAssembled.HasValue ?
                new ObjectParameter("DryAssembled", dryAssembled) :
                new ObjectParameter("DryAssembled", typeof(bool));
    
            var doorOptionParameter = doorOption.HasValue ?
                new ObjectParameter("DoorOption", doorOption) :
                new ObjectParameter("DoorOption", typeof(int));
    
            var listOrderParameter = listOrder.HasValue ?
                new ObjectParameter("ListOrder", listOrder) :
                new ObjectParameter("ListOrder", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var depthParameter = depth.HasValue ?
                new ObjectParameter("Depth", depth) :
                new ObjectParameter("Depth", typeof(decimal));
    
            var doorStyleIdParameter = doorStyleId.HasValue ?
                new ObjectParameter("DoorStyleId", doorStyleId) :
                new ObjectParameter("DoorStyleId", typeof(int));
    
            var cabinetColourIdParameter = cabinetColourId.HasValue ?
                new ObjectParameter("CabinetColourId", cabinetColourId) :
                new ObjectParameter("CabinetColourId", typeof(int));
    
            var additionalChargesParameter = additionalCharges.HasValue ?
                new ObjectParameter("AdditionalCharges", additionalCharges) :
                new ObjectParameter("AdditionalCharges", typeof(decimal));
    
            var depthModifiedParameter = depthModified.HasValue ?
                new ObjectParameter("DepthModified", depthModified) :
                new ObjectParameter("DepthModified", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Quote_ProductInsert", productIdParameter, quoteIdParameter, netCostPriceParameter, discountRateParameter, totalCostPriceParameter, markUpPercentParameter, salesPriceParameter, quantityParameter, undrilledForHingesParameter, doorHangParameter, dryAssembledParameter, doorOptionParameter, listOrderParameter, notesParameter, depthParameter, doorStyleIdParameter, cabinetColourIdParameter, additionalChargesParameter, depthModifiedParameter);
        }
    
        public virtual int Quote_ProductsDeleteForQuote(Nullable<int> quoteId)
        {
            var quoteIdParameter = quoteId.HasValue ?
                new ObjectParameter("QuoteId", quoteId) :
                new ObjectParameter("QuoteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Quote_ProductsDeleteForQuote", quoteIdParameter);
        }
    
        public virtual int Quote_ProductServicesDeleteForQuote(Nullable<int> quoteId)
        {
            var quoteIdParameter = quoteId.HasValue ?
                new ObjectParameter("QuoteId", quoteId) :
                new ObjectParameter("QuoteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Quote_ProductServicesDeleteForQuote", quoteIdParameter);
        }
    
        public virtual int Quote_ProductServicesInsert(Nullable<int> productServiceId, Nullable<int> quoteId, Nullable<decimal> netCostPrice, Nullable<decimal> discountRate, Nullable<decimal> totalCostPrice, Nullable<decimal> markUpPercent, Nullable<decimal> salesPrice, Nullable<int> listOrder, Nullable<int> quantity, string notes)
        {
            var productServiceIdParameter = productServiceId.HasValue ?
                new ObjectParameter("ProductServiceId", productServiceId) :
                new ObjectParameter("ProductServiceId", typeof(int));
    
            var quoteIdParameter = quoteId.HasValue ?
                new ObjectParameter("QuoteId", quoteId) :
                new ObjectParameter("QuoteId", typeof(int));
    
            var netCostPriceParameter = netCostPrice.HasValue ?
                new ObjectParameter("NetCostPrice", netCostPrice) :
                new ObjectParameter("NetCostPrice", typeof(decimal));
    
            var discountRateParameter = discountRate.HasValue ?
                new ObjectParameter("DiscountRate", discountRate) :
                new ObjectParameter("DiscountRate", typeof(decimal));
    
            var totalCostPriceParameter = totalCostPrice.HasValue ?
                new ObjectParameter("TotalCostPrice", totalCostPrice) :
                new ObjectParameter("TotalCostPrice", typeof(decimal));
    
            var markUpPercentParameter = markUpPercent.HasValue ?
                new ObjectParameter("MarkUpPercent", markUpPercent) :
                new ObjectParameter("MarkUpPercent", typeof(decimal));
    
            var salesPriceParameter = salesPrice.HasValue ?
                new ObjectParameter("SalesPrice", salesPrice) :
                new ObjectParameter("SalesPrice", typeof(decimal));
    
            var listOrderParameter = listOrder.HasValue ?
                new ObjectParameter("ListOrder", listOrder) :
                new ObjectParameter("ListOrder", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Quote_ProductServicesInsert", productServiceIdParameter, quoteIdParameter, netCostPriceParameter, discountRateParameter, totalCostPriceParameter, markUpPercentParameter, salesPriceParameter, listOrderParameter, quantityParameter, notesParameter);
        }
    
        public virtual int Quote_Restore(Nullable<int> quoteId)
        {
            var quoteIdParameter = quoteId.HasValue ?
                new ObjectParameter("QuoteId", quoteId) :
                new ObjectParameter("QuoteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Quote_Restore", quoteIdParameter);
        }
    
        public virtual ObjectResult<Quotes_LastActive_Result> Quotes_LastActive(Nullable<int> customerId, Nullable<int> companyId, Nullable<int> trendUserId, Nullable<int> catalogueId, Nullable<int> top)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var trendUserIdParameter = trendUserId.HasValue ?
                new ObjectParameter("TrendUserId", trendUserId) :
                new ObjectParameter("TrendUserId", typeof(int));
    
            var catalogueIdParameter = catalogueId.HasValue ?
                new ObjectParameter("CatalogueId", catalogueId) :
                new ObjectParameter("CatalogueId", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Quotes_LastActive_Result>("Quotes_LastActive", customerIdParameter, companyIdParameter, trendUserIdParameter, catalogueIdParameter, topParameter);
        }
    
        public virtual ObjectResult<Quotes_Search_Result> Quotes_Search(string quoteId, string quoteRef, Nullable<int> customerId, Nullable<int> companyId, Nullable<int> trendUserId, Nullable<int> catalogueId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> deleted)
        {
            var quoteIdParameter = quoteId != null ?
                new ObjectParameter("QuoteId", quoteId) :
                new ObjectParameter("QuoteId", typeof(string));
    
            var quoteRefParameter = quoteRef != null ?
                new ObjectParameter("QuoteRef", quoteRef) :
                new ObjectParameter("QuoteRef", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var trendUserIdParameter = trendUserId.HasValue ?
                new ObjectParameter("TrendUserId", trendUserId) :
                new ObjectParameter("TrendUserId", typeof(int));
    
            var catalogueIdParameter = catalogueId.HasValue ?
                new ObjectParameter("CatalogueId", catalogueId) :
                new ObjectParameter("CatalogueId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Quotes_Search_Result>("Quotes_Search", quoteIdParameter, quoteRefParameter, customerIdParameter, companyIdParameter, trendUserIdParameter, catalogueIdParameter, fromDateParameter, toDateParameter, deletedParameter);
        }
    
        public virtual ObjectResult<QuoteStep1_SelectCatalogue_Result> QuoteStep1_SelectCatalogue(Nullable<int> quoteId)
        {
            var quoteIdParameter = quoteId.HasValue ?
                new ObjectParameter("QuoteId", quoteId) :
                new ObjectParameter("QuoteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuoteStep1_SelectCatalogue_Result>("QuoteStep1_SelectCatalogue", quoteIdParameter);
        }
    
        public virtual ObjectResult<QuoteStep2_SelectRange_Result> QuoteStep2_SelectRange(Nullable<int> quoteId)
        {
            var quoteIdParameter = quoteId.HasValue ?
                new ObjectParameter("QuoteId", quoteId) :
                new ObjectParameter("QuoteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuoteStep2_SelectRange_Result>("QuoteStep2_SelectRange", quoteIdParameter);
        }
    
        public virtual ObjectResult<RangeGroup_Select_Result> RangeGroup_Select(Nullable<int> rangeGroupID, Nullable<int> catalogueID)
        {
            var rangeGroupIDParameter = rangeGroupID.HasValue ?
                new ObjectParameter("RangeGroupID", rangeGroupID) :
                new ObjectParameter("RangeGroupID", typeof(int));
    
            var catalogueIDParameter = catalogueID.HasValue ?
                new ObjectParameter("CatalogueID", catalogueID) :
                new ObjectParameter("CatalogueID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RangeGroup_Select_Result>("RangeGroup_Select", rangeGroupIDParameter, catalogueIDParameter);
        }
    
        public virtual ObjectResult<RangeGroup_TagsSelect_Result> RangeGroup_TagsSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RangeGroup_TagsSelect_Result>("RangeGroup_TagsSelect");
        }
    
        public virtual ObjectResult<SelectNonAvailableProductsForPriceGroup_Result> SelectNonAvailableProductsForPriceGroup(string productIdList, Nullable<int> catalogueId)
        {
            var productIdListParameter = productIdList != null ?
                new ObjectParameter("ProductIdList", productIdList) :
                new ObjectParameter("ProductIdList", typeof(string));
    
            var catalogueIdParameter = catalogueId.HasValue ?
                new ObjectParameter("CatalogueId", catalogueId) :
                new ObjectParameter("CatalogueId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectNonAvailableProductsForPriceGroup_Result>("SelectNonAvailableProductsForPriceGroup", productIdListParameter, catalogueIdParameter);
        }
    
        public virtual int StationaryTemplate_Delete(Nullable<int> stationaryTemplateId)
        {
            var stationaryTemplateIdParameter = stationaryTemplateId.HasValue ?
                new ObjectParameter("StationaryTemplateId", stationaryTemplateId) :
                new ObjectParameter("StationaryTemplateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StationaryTemplate_Delete", stationaryTemplateIdParameter);
        }
    
        public virtual int StationaryTemplate_InsertOrUpdate(Nullable<int> stationaryTemplateId, Nullable<int> catalogueId, Nullable<int> companyId, string name)
        {
            var stationaryTemplateIdParameter = stationaryTemplateId.HasValue ?
                new ObjectParameter("StationaryTemplateId", stationaryTemplateId) :
                new ObjectParameter("StationaryTemplateId", typeof(int));
    
            var catalogueIdParameter = catalogueId.HasValue ?
                new ObjectParameter("CatalogueId", catalogueId) :
                new ObjectParameter("CatalogueId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StationaryTemplate_InsertOrUpdate", stationaryTemplateIdParameter, catalogueIdParameter, companyIdParameter, nameParameter);
        }
    
        public virtual int SubCategory_UpdateImage(Nullable<int> subCategoryID, byte[] binaryImage)
        {
            var subCategoryIDParameter = subCategoryID.HasValue ?
                new ObjectParameter("SubCategoryID", subCategoryID) :
                new ObjectParameter("SubCategoryID", typeof(int));
    
            var binaryImageParameter = binaryImage != null ?
                new ObjectParameter("BinaryImage", binaryImage) :
                new ObjectParameter("BinaryImage", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubCategory_UpdateImage", subCategoryIDParameter, binaryImageParameter);
        }
    
        public virtual ObjectResult<Tags_SelectForCatalogue_Result> Tags_SelectForCatalogue(Nullable<int> catalogueId)
        {
            var catalogueIdParameter = catalogueId.HasValue ?
                new ObjectParameter("CatalogueId", catalogueId) :
                new ObjectParameter("CatalogueId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tags_SelectForCatalogue_Result>("Tags_SelectForCatalogue", catalogueIdParameter);
        }
    
        public virtual ObjectResult<TenantSettings_SelectForTenant_Result> TenantSettings_SelectForTenant(Nullable<int> tenantID)
        {
            var tenantIDParameter = tenantID.HasValue ?
                new ObjectParameter("TenantID", tenantID) :
                new ObjectParameter("TenantID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TenantSettings_SelectForTenant_Result>("TenantSettings_SelectForTenant", tenantIDParameter);
        }
    
        public virtual int TrendUser_Delete(string aspnetId, Nullable<bool> deleteAspNetUser)
        {
            var aspnetIdParameter = aspnetId != null ?
                new ObjectParameter("aspnetId", aspnetId) :
                new ObjectParameter("aspnetId", typeof(string));
    
            var deleteAspNetUserParameter = deleteAspNetUser.HasValue ?
                new ObjectParameter("DeleteAspNetUser", deleteAspNetUser) :
                new ObjectParameter("DeleteAspNetUser", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TrendUser_Delete", aspnetIdParameter, deleteAspNetUserParameter);
        }
    
        public virtual int TrendUser_InsertOrUpdate(Nullable<int> trendUserId, string aspNetUserId, string tokenReset, Nullable<int> tenantId, Nullable<int> userTypeId, string email, Nullable<int> companyId, string fullname, string notes, Nullable<int> introductionRouteId, string introductionRouteOther, string userName, Nullable<bool> insecurePassword)
        {
            var trendUserIdParameter = trendUserId.HasValue ?
                new ObjectParameter("TrendUserId", trendUserId) :
                new ObjectParameter("TrendUserId", typeof(int));
    
            var aspNetUserIdParameter = aspNetUserId != null ?
                new ObjectParameter("AspNetUserId", aspNetUserId) :
                new ObjectParameter("AspNetUserId", typeof(string));
    
            var tokenResetParameter = tokenReset != null ?
                new ObjectParameter("TokenReset", tokenReset) :
                new ObjectParameter("TokenReset", typeof(string));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var fullnameParameter = fullname != null ?
                new ObjectParameter("Fullname", fullname) :
                new ObjectParameter("Fullname", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var introductionRouteIdParameter = introductionRouteId.HasValue ?
                new ObjectParameter("IntroductionRouteId", introductionRouteId) :
                new ObjectParameter("IntroductionRouteId", typeof(int));
    
            var introductionRouteOtherParameter = introductionRouteOther != null ?
                new ObjectParameter("IntroductionRouteOther", introductionRouteOther) :
                new ObjectParameter("IntroductionRouteOther", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var insecurePasswordParameter = insecurePassword.HasValue ?
                new ObjectParameter("InsecurePassword", insecurePassword) :
                new ObjectParameter("InsecurePassword", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TrendUser_InsertOrUpdate", trendUserIdParameter, aspNetUserIdParameter, tokenResetParameter, tenantIdParameter, userTypeIdParameter, emailParameter, companyIdParameter, fullnameParameter, notesParameter, introductionRouteIdParameter, introductionRouteOtherParameter, userNameParameter, insecurePasswordParameter);
        }
    }
}
